[Rockridge bart schedule]{https://api.bart.gov/api/etd.aspx?cmd=etd&orig=ROCK&key=MW9S-E7SL-26DU-VV8V&json=y}

* SPI
    let sclk = pins.gpio12;
    let sdo = pins.gpio11;
    let sdi = pins.gpio13;
  A4 on the arduino
  24 pins for the outside ring
  16 for inside ring
* Voltage investigation
  - Tried using different power source
  - tried different spi pin (13)
** Red shifter
   - 3.3 volt rail is normal
   - 5.5 volt rail is normal
   - 3.3 is Not being converted to 5.5 when testing spi (both 3.3 rail and 5.5 rail are steady when bits sent)
   - 3.3 is converted to 5.5 when conntecting GND to TXI and Listening on TXO
   - At lower freq (64k), voltage goes to 5.5 (works)
   - At 641k, goes to about 5v
   - Problem solved: Freq too high
** blue shifter
   - NO signal on B1
** No shifter
   - Noticing voltage drop when frame corrupt, voltage on clock and data pin goes to 0.
* notes
  - Needed to ground pin B1 to put into bootloader mode (or something), made flashing work.
  - Needed to add loop at the end to prevent spi bus from being dropped (panic)
  - Had to run `rustup override set stable-x86_64-apple-darwin` in bart_core and `cargo test --target=x86_64-apple-darwin` in virtual env to get test to run

* Behavior
  - fetch schedule on boot
  - Calculate current etd based on response and timer, discard trains which have left
  -- If soonest train schedule fits in inner ring render it
  --- If there is a next train render it in outer ring
  -- If soonest train doesn't fit in inner ring, render in outer ring
  - If 2 trains in queue and soonest leaves within 2 minutes, fetch schedule (throttle requests)
  - If 1 or no trains in queue fetch every 5 min
  - If we haven't fetched for 10 min, fetch (correct any changes to schedule)

  - If fetch fails, show red, leds and retry
  - show fetching animation during fetch
  - handle failed to connect to wifi


* fetch logic
  - need to use alarms
  - after handle_response
  -- if 0 - 1 train, fetch in 5 min
  -- if 2 trains, fetch in soonest trains etd - 2 min or 10 min which ever is sooner
  -- else fetch in 10 min

* Todo
** Timers
   - (x) higher frequency alarm to update ui (once every 1/60s?)
   - ( ) lower requency alarm to make api requests (once every 5 min?)
   - (x) Calculate remaining etd based on last request and current timer.
** Neopixels
   - ( ) Add pins to arduino for data/power/gnd
   - (x) choose a neopixel library
   - (x) calculate which pixels to draw based on etd above (outer ring: 24 pix, inner right: 16 pix, center: 4)
   - ( ) loading state for wifi connect, network request, error states
** Body
   - Pick design
   - extra components? (barrel jack? power switch)
   - Add activation (button or motion sensor)
   - Add brightness sensor (dim leds when its dark)


* Future plans
  - Configurable via BLE app
